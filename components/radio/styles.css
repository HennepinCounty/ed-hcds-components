/* .grid-container {
  display: grid;
  grid-template-columns: auto auto auto auto;
  padding: 10px;
}

.radio {
  margin: 8px;
}
.radio input[type="radio"] {
  position: absolute;
  opacity: 0;
}
.radio input[type="radio"] + .radio-label:before {
  content: "";
  background: #fff;
  border-radius: 100%;
  border: 1px solid #b4b4b4;
  display: inline-block;
  width: 10px;
  height: 10px;
  position: relative;
  top: -0.2em;
  margin-right: 1em;
  margin-top: 10px;
  vertical-align: top;
  cursor: pointer;
  text-align: center;
  transition: all 250ms ease;
}
.radio input[type="radio"]:checked + .radio-label:before {
  background-color: black;
  box-shadow: inset 0 0 0 4px black;
}
.radio input[type="radio"]:focus-within + .radio-label:before {
  outline: 2px solid #0058a4;
  outline-offset: 3px;
}
.radio input[type="radio"]:disabled + .radio-label:before {
  box-shadow: inset 0 0 0 4px #f4f4f4;
  border-color: #b4b4b4;
  background: #b4b4b4;
}
.radio input[type="radio"] + .radio-label:empty:before {
  margin-right: 0;
} */

/* ======================================== */
/* ======================================== */
/* GovUK Example */
/* ======================================== */
/* ======================================== */

.hc-radios {
  margin-top: var(--hc-spacing-04);
}

/* Styling for radio item */
.hc-radios__item {
  font-family: var(--hc-font-family);
  font-size: var(--hc-font-body-size-regular);
  display: block;
  position: relative;
  min-height: 40px;
  margin-bottom: var(--hc-spacing-05);
  padding-left: 40px;
  clear: left;
}

/* prevent extra spacing added by last element */
.hc-radios__item:last-child,
.hc-radios__item:last-of-type {
  margin-bottom: 0px;
}

/* This hides the default browser stylin of inputs */
.hc-radios__input {
  position: absolute;
  z-index: 1;
  top: 1px;
  left: 1px;
  width: 44px;
  height: 44px;
  margin: 0;
  opacity: 0;
  cursor: pointer;
}

/* This pushes input text to the riht to make room for radios */
.hc-radios__label {
  font-size: var(--hc-font-fieldLabel-size-regular);
  display: inline-block;
  margin-bottom: 0;
  padding-top: 8px;
  padding-left: var(--hc-spacing-04);
  padding-right: var(--hc-spacing-04);
  padding-bottom: var(--hc-spacing-01);
  cursor: pointer;
  /* remove 300ms pause on mobile */
  touch-action: manipulation;
  max-width: 80ch;
}

/* ( ) Radio ring */
.hc-radios__label::before {
  content: "";
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;

  width: 44px;
  height: 44px;
  border: var(--hc-border-width-medium) solid var(--hc-border-color-strong);
  border-radius: 50%;
  background: transparent;
}

/* •  Radio button
 We create the 'button' entirely out of 'border' so that they remain
 'filled' even when colours are overridden in the browser. */
.hc-radios__label::after {
  content: "";

  position: absolute;
  /* position or adio */
  top: var(--hc-spacing-04);
  left: var(--hc-spacing-04);

  width: 0px;
  height: 0px;

  /* defines size of radio */
  border: 10px solid var(--hc-border-color-strong);
  border-radius: 50%;
  opacity: 0;
  background: currentcolor;
}

.hc-checkbox__hint {
  display: block;
  padding-left: var(--hc-spacing-03);
  padding-right: var(--hc-spacing-03);
}

/* Focused state */
.hc-radios__input:focus + .hc-radios__label::before {
  border-width: 4px;

  outline: var(--hc-outline-style-focus);
  /* outline: 3px solid var(--hc-background-brand); */
  outline-offset: 3px;
  border: 4px solid var(--hc-black);
}

/* When in an explicit forced-color mode, we can use a different system
  color for the outline to better match focus states of native controls */
/* @media screen and (forced-colors: active), (-ms-high-contrast: active) {
    outline-color: var(--hc-outline-style-focus--alt);
  }
}

/* Selected state */
.hc-radios__input:checked + .hc-radios__label::after {
  opacity: 1;
}

/* 
@import "../error-message/index";
@import "../fieldset/index";
@import "../hint/index";
@import "../label/index";

@include govuk-exports("govuk/component/radios") {
  $govuk-touch-target-size: 44px;
  $govuk-radios-size: 40px;
  $govuk-small-radios-size: 24px;
  $govuk-radios-label-padding-left-right: govuk-spacing(3);
  // When the default focus width is used on a curved edge it looks visually smaller.
  // So for the circular radios we bump the default to make it look visually consistent.
  $govuk-radios-focus-width: $govuk-focus-width + 1px;

  




 

  // =========================================================
  // Inline radios
  // =========================================================

  .govuk-radios--inline {
    @include govuk-media-query($from: tablet) {
      @include govuk-clearfix;

      .govuk-radios__item {
        margin-right: govuk-spacing(4);
        float: left;
        clear: none;
      }
    }
  }


  // =========================================================
  // Conditional reveals
  // =========================================================

  // The narrow border is used in the conditional reveals because the border has
  // to be an even number in order to be centred under the 40px checkbox or radio.
  $conditional-border-width: $govuk-border-width-narrow;
  // Calculate the amount of padding needed to keep the border centered against the radios.
  $conditional-border-padding: ($govuk-radios-size / 2) - ($conditional-border-width / 2);
  // Move the border centered with the radios
  $conditional-margin-left: $conditional-border-padding;
  // Move the contents of the conditional inline with the label
  $conditional-padding-left: $conditional-border-padding + $govuk-radios-label-padding-left-right;

  .govuk-radios__conditional {
    @include govuk-responsive-margin(4, "bottom");
    margin-left: $conditional-margin-left;
    padding-left: $conditional-padding-left;
    border-left: $conditional-border-width solid $govuk-border-colour;

    .govuk-frontend-supported &--hidden {
      display: none;
    }

    & > :last-child {
      margin-bottom: 0;
    }
  }

  // =========================================================
  // Small checkboxes
  // =========================================================

  .govuk-radios--small {
    $input-offset: ($govuk-touch-target-size - $govuk-small-radios-size) / 2;
    $label-offset: $govuk-touch-target-size - $input-offset;

    .govuk-radios__item {
      @include govuk-clearfix;
      min-height: 0;
      margin-bottom: 0;
      padding-left: $label-offset;
      float: left;
    }

    // Shift the touch target into the left margin so that the visible edge of
    // the control is aligned
    //
    //   ┆Which colour is your favourite?
    //  ┌┆───┐
    //  │┆() │ Purple
    //  └┆▲──┘
    //  ▲┆└─ Radio pseudo element, aligned with margin
    //  └─── Touch target (invisible input), shifted into the margin
    .govuk-radios__input {
      left: $input-offset * -1;
    }

    // Adjust the size and position of the label.
    //
    // Unlike larger radios, we also have to float the label in order to
    // 'shrink' it, preventing the hover state from kicking in across the full
    // width of the parent element.
    .govuk-radios__label {
      margin-top: -2px;
      padding: 13px govuk-spacing(3) 13px 1px;
      float: left;

      @include govuk-media-query($from: tablet) {
        padding: 11px govuk-spacing(3) 10px 1px;
      }
    }

    // ( ) Radio ring
    //
    // Reduce the size of the control [1], vertically centering it within the
    // touch target [2]
    .govuk-radios__label::before {
      top: $input-offset - $govuk-border-width-form-element; // 2
      width: $govuk-small-radios-size; // 1
      height: $govuk-small-radios-size; // 1
    }

    //  •  Radio button
    //
    // Reduce the size of the 'button' and center it within the ring
    .govuk-radios__label::after {
      top: 15px;
      left: 7px;
      border-width: 5px;
    }

    // Fix position of hint with small radios
    //
    // Do not use hints with small radios – because they're within the input
    // wrapper they trigger the hover state, but clicking them doesn't actually
    // activate the control.
    //
    // (If you do use them, they won't look completely broken... but seriously,
    // don't use them)
    .govuk-radios__hint {
      padding: 0;
      clear: both;
      pointer-events: none;
    }

    // Align conditional reveals with small radios
    .govuk-radios__conditional {
      $margin-left: ($govuk-small-radios-size / 2) - ($conditional-border-width / 2);
      margin-left: $margin-left;
      padding-left: $label-offset - ($margin-left + $conditional-border-width);
      clear: both;
    }

    .govuk-radios__divider {
      width: $govuk-small-radios-size;
      margin-bottom: govuk-spacing(1);
    }

    // Hover state for small radios.
    //
    // We use a hover state for small radios because the touch target size
    // is so much larger than their visible size, and so we need to provide
    // feedback to the user as to which radio they will select when their
    // cursor is outside of the visible area.
    .govuk-radios__item:hover .govuk-radios__input:not(:disabled) + .govuk-radios__label::before {
      // Forced colours modes tend to ignore box-shadow.
      // Apply an outline for those modes to use instead.
      outline: $govuk-radios-focus-width dashed transparent;
      outline-offset: 1px;
      box-shadow: 0 0 0 $govuk-hover-width $govuk-hover-colour;
    }

    // Because we've overridden the border-shadow provided by the focus state,
    // we need to redefine that too.
    //
    // We use two box shadows, one that restores the original focus state [1]
    // and another that then applies the hover state [2].
    .govuk-radios__item:hover .govuk-radios__input:focus + .govuk-radios__label::before {
      // Set different HCM colour when we have both hover/focus applied at once
      @media screen and (forced-colors: active), (-ms-high-contrast: active) {
        outline-color: Highlight;
      }
      // prettier-ignore
      box-shadow:
        0 0 0 $govuk-radios-focus-width $govuk-focus-colour // 1,
        0 0 0 $govuk-hover-width $govuk-hover-colour; // 2
    }

    // For devices that explicitly don't support hover, don't provide a hover
    // state (e.g. on touch devices like iOS).
    //
    // We can't use `@media (hover: hover)` because we wouldn't get the hover
    // state in browsers that don't support `@media (hover)` (like Internet
    // Explorer) – so we have to 'undo' the hover state instead.
    @media (hover: none), (pointer: coarse) {
      .govuk-radios__item:hover .govuk-radios__input:not(:disabled) + .govuk-radios__label::before {
        box-shadow: initial;
      }

      .govuk-radios__item:hover .govuk-radios__input:focus + .govuk-radios__label::before {
        box-shadow: 0 0 0 $govuk-radios-focus-width $govuk-focus-colour;
      }
    }
  }
} */
